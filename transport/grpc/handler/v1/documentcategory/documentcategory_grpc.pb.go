// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: transport/grpc/handler/v1/documentcategory/documentcategory.proto

package documentcategory

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DocumentCategoryService_DeleteDocumentCategory_FullMethodName     = "/micro.transport.grpc.handler.v1.documentcategory.DocumentCategoryService/DeleteDocumentCategory"
	DocumentCategoryService_FindDocumentCategory_FullMethodName       = "/micro.transport.grpc.handler.v1.documentcategory.DocumentCategoryService/FindDocumentCategory"
	DocumentCategoryService_FindDocumentCategoryBySlug_FullMethodName = "/micro.transport.grpc.handler.v1.documentcategory.DocumentCategoryService/FindDocumentCategoryBySlug"
	DocumentCategoryService_GetDocumentCategories_FullMethodName      = "/micro.transport.grpc.handler.v1.documentcategory.DocumentCategoryService/GetDocumentCategories"
	DocumentCategoryService_SaveDocumentCategory_FullMethodName       = "/micro.transport.grpc.handler.v1.documentcategory.DocumentCategoryService/SaveDocumentCategory"
	DocumentCategoryService_UpdateDocumentCategory_FullMethodName     = "/micro.transport.grpc.handler.v1.documentcategory.DocumentCategoryService/UpdateDocumentCategory"
)

// DocumentCategoryServiceClient is the client API for DocumentCategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocumentCategoryServiceClient interface {
	DeleteDocumentCategory(ctx context.Context, in *DeleteDocumentCategoryRequest, opts ...grpc.CallOption) (*DocumentCategoryDeleted, error)
	FindDocumentCategory(ctx context.Context, in *FindDocumentCategoryRequest, opts ...grpc.CallOption) (*DocumentCategory, error)
	FindDocumentCategoryBySlug(ctx context.Context, in *FindDocumentCategoryBySlugRequest, opts ...grpc.CallOption) (*DocumentCategory, error)
	GetDocumentCategories(ctx context.Context, in *GetDocumentCategoriesRequest, opts ...grpc.CallOption) (*DocumentCategories, error)
	SaveDocumentCategory(ctx context.Context, in *SaveDocumentCategoryRequest, opts ...grpc.CallOption) (*DocumentCategory, error)
	UpdateDocumentCategory(ctx context.Context, in *UpdateDocumentCategoryRequest, opts ...grpc.CallOption) (*DocumentCategory, error)
}

type documentCategoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDocumentCategoryServiceClient(cc grpc.ClientConnInterface) DocumentCategoryServiceClient {
	return &documentCategoryServiceClient{cc}
}

func (c *documentCategoryServiceClient) DeleteDocumentCategory(ctx context.Context, in *DeleteDocumentCategoryRequest, opts ...grpc.CallOption) (*DocumentCategoryDeleted, error) {
	out := new(DocumentCategoryDeleted)
	err := c.cc.Invoke(ctx, DocumentCategoryService_DeleteDocumentCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentCategoryServiceClient) FindDocumentCategory(ctx context.Context, in *FindDocumentCategoryRequest, opts ...grpc.CallOption) (*DocumentCategory, error) {
	out := new(DocumentCategory)
	err := c.cc.Invoke(ctx, DocumentCategoryService_FindDocumentCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentCategoryServiceClient) FindDocumentCategoryBySlug(ctx context.Context, in *FindDocumentCategoryBySlugRequest, opts ...grpc.CallOption) (*DocumentCategory, error) {
	out := new(DocumentCategory)
	err := c.cc.Invoke(ctx, DocumentCategoryService_FindDocumentCategoryBySlug_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentCategoryServiceClient) GetDocumentCategories(ctx context.Context, in *GetDocumentCategoriesRequest, opts ...grpc.CallOption) (*DocumentCategories, error) {
	out := new(DocumentCategories)
	err := c.cc.Invoke(ctx, DocumentCategoryService_GetDocumentCategories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentCategoryServiceClient) SaveDocumentCategory(ctx context.Context, in *SaveDocumentCategoryRequest, opts ...grpc.CallOption) (*DocumentCategory, error) {
	out := new(DocumentCategory)
	err := c.cc.Invoke(ctx, DocumentCategoryService_SaveDocumentCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentCategoryServiceClient) UpdateDocumentCategory(ctx context.Context, in *UpdateDocumentCategoryRequest, opts ...grpc.CallOption) (*DocumentCategory, error) {
	out := new(DocumentCategory)
	err := c.cc.Invoke(ctx, DocumentCategoryService_UpdateDocumentCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocumentCategoryServiceServer is the server API for DocumentCategoryService service.
// All implementations must embed UnimplementedDocumentCategoryServiceServer
// for forward compatibility
type DocumentCategoryServiceServer interface {
	DeleteDocumentCategory(context.Context, *DeleteDocumentCategoryRequest) (*DocumentCategoryDeleted, error)
	FindDocumentCategory(context.Context, *FindDocumentCategoryRequest) (*DocumentCategory, error)
	FindDocumentCategoryBySlug(context.Context, *FindDocumentCategoryBySlugRequest) (*DocumentCategory, error)
	GetDocumentCategories(context.Context, *GetDocumentCategoriesRequest) (*DocumentCategories, error)
	SaveDocumentCategory(context.Context, *SaveDocumentCategoryRequest) (*DocumentCategory, error)
	UpdateDocumentCategory(context.Context, *UpdateDocumentCategoryRequest) (*DocumentCategory, error)
	mustEmbedUnimplementedDocumentCategoryServiceServer()
}

// UnimplementedDocumentCategoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDocumentCategoryServiceServer struct {
}

func (UnimplementedDocumentCategoryServiceServer) DeleteDocumentCategory(context.Context, *DeleteDocumentCategoryRequest) (*DocumentCategoryDeleted, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDocumentCategory not implemented")
}
func (UnimplementedDocumentCategoryServiceServer) FindDocumentCategory(context.Context, *FindDocumentCategoryRequest) (*DocumentCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDocumentCategory not implemented")
}
func (UnimplementedDocumentCategoryServiceServer) FindDocumentCategoryBySlug(context.Context, *FindDocumentCategoryBySlugRequest) (*DocumentCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDocumentCategoryBySlug not implemented")
}
func (UnimplementedDocumentCategoryServiceServer) GetDocumentCategories(context.Context, *GetDocumentCategoriesRequest) (*DocumentCategories, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentCategories not implemented")
}
func (UnimplementedDocumentCategoryServiceServer) SaveDocumentCategory(context.Context, *SaveDocumentCategoryRequest) (*DocumentCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveDocumentCategory not implemented")
}
func (UnimplementedDocumentCategoryServiceServer) UpdateDocumentCategory(context.Context, *UpdateDocumentCategoryRequest) (*DocumentCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDocumentCategory not implemented")
}
func (UnimplementedDocumentCategoryServiceServer) mustEmbedUnimplementedDocumentCategoryServiceServer() {
}

// UnsafeDocumentCategoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocumentCategoryServiceServer will
// result in compilation errors.
type UnsafeDocumentCategoryServiceServer interface {
	mustEmbedUnimplementedDocumentCategoryServiceServer()
}

func RegisterDocumentCategoryServiceServer(s grpc.ServiceRegistrar, srv DocumentCategoryServiceServer) {
	s.RegisterService(&DocumentCategoryService_ServiceDesc, srv)
}

func _DocumentCategoryService_DeleteDocumentCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDocumentCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentCategoryServiceServer).DeleteDocumentCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentCategoryService_DeleteDocumentCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentCategoryServiceServer).DeleteDocumentCategory(ctx, req.(*DeleteDocumentCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentCategoryService_FindDocumentCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDocumentCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentCategoryServiceServer).FindDocumentCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentCategoryService_FindDocumentCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentCategoryServiceServer).FindDocumentCategory(ctx, req.(*FindDocumentCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentCategoryService_FindDocumentCategoryBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDocumentCategoryBySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentCategoryServiceServer).FindDocumentCategoryBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentCategoryService_FindDocumentCategoryBySlug_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentCategoryServiceServer).FindDocumentCategoryBySlug(ctx, req.(*FindDocumentCategoryBySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentCategoryService_GetDocumentCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentCategoryServiceServer).GetDocumentCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentCategoryService_GetDocumentCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentCategoryServiceServer).GetDocumentCategories(ctx, req.(*GetDocumentCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentCategoryService_SaveDocumentCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveDocumentCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentCategoryServiceServer).SaveDocumentCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentCategoryService_SaveDocumentCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentCategoryServiceServer).SaveDocumentCategory(ctx, req.(*SaveDocumentCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentCategoryService_UpdateDocumentCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDocumentCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentCategoryServiceServer).UpdateDocumentCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentCategoryService_UpdateDocumentCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentCategoryServiceServer).UpdateDocumentCategory(ctx, req.(*UpdateDocumentCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DocumentCategoryService_ServiceDesc is the grpc.ServiceDesc for DocumentCategoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DocumentCategoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "micro.transport.grpc.handler.v1.documentcategory.DocumentCategoryService",
	HandlerType: (*DocumentCategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteDocumentCategory",
			Handler:    _DocumentCategoryService_DeleteDocumentCategory_Handler,
		},
		{
			MethodName: "FindDocumentCategory",
			Handler:    _DocumentCategoryService_FindDocumentCategory_Handler,
		},
		{
			MethodName: "FindDocumentCategoryBySlug",
			Handler:    _DocumentCategoryService_FindDocumentCategoryBySlug_Handler,
		},
		{
			MethodName: "GetDocumentCategories",
			Handler:    _DocumentCategoryService_GetDocumentCategories_Handler,
		},
		{
			MethodName: "SaveDocumentCategory",
			Handler:    _DocumentCategoryService_SaveDocumentCategory_Handler,
		},
		{
			MethodName: "UpdateDocumentCategory",
			Handler:    _DocumentCategoryService_UpdateDocumentCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transport/grpc/handler/v1/documentcategory/documentcategory.proto",
}
